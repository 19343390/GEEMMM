/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var table = ee.FeatureCollection("users/yanchojo/training_data");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
/*
          
          var Chot_class = ee.Algorithms.If( HOT_cont_out, 
                                             RFclass.ChotClassify(Chot, t_poly, label, bands));
          var CLot_class = ee.Algorithms.If( LOT_cont_out, 
                                             RFclass.ClotClassify(Clot, t_poly, label, bands));
          var Ccom_class = ee.Algorithms.If( combo_cont_out, 
                                             RFclass.CcomClassify(Chot, Clot, t_poly, label, bands));
          var Hhot_class = ee.Algorithms.If( HOT_hist_out, 
                                             RFclass.HhotClassify(Hhot, class_ref_type, Chot, 
                                                                  t_poly, label, bands));
          var Hlot_class = ee.Algorithms.If( LOT_hist_out, 
                                             RFclass.HlotClassify(Hlot, class_ref_type, Clot, 
                                                                  t_poly, label, bands));
          var Hcom_class = ee.Algorithms.If( combo_hist_out, 
                                             RFclass.HcomClassify(Hhot, Hlot, class_ref_type,
                                                                  Chot, Clot, t_poly, label, bands));
  */
  
exports.ChotClassify = function(Chot, t_poly, label, bands, ROI, trees){
  
  var clPalette = [
  'E69800', // Terrestrial Forest
  '267300', // Closed-Canopy Mangrove
  '4CE600', // Open-Canopy Mangrove I
  '8400A8', // Exposed / Barren
  'CDF57A', // Open-Canopy Mangrove II
  '00FFC5', // Urban / Built
  '004DA8', // Residual Water
  'FFFF00', // Non-Forest Vegetation
  ];
  
  
  // Overlay the points on the imagery to get training for HOT
   var sample_CHOT = Chot.select(bands).sampleRegions({
              collection: t_poly,
              properties: [label],
              scale: 30, 
              tileScale: 16
            });

  //add random column to training data
  sample_CHOT = sample_CHOT.randomColumn({ seed: 1 });
  // select 70% to train
  var CHOT_training = sample_CHOT.filter(ee.Filter.lt('random', 0.7));
  // reserve 30% to validate
  var CHOT_validation = sample_CHOT.filter(ee.Filter.gte('random', 0.7));

  // Train a RF classifier for the HOT image
  var CHOT_trained_classifier = ee.Classifier.smileRandomForest(trees)
                              .train({
                                  features: CHOT_training,
                                  classProperty: label,
                                  inputProperties: bands
                                  });
  

  // Classify the HOT image.
  var classified_CHOT = Chot.classify(CHOT_trained_classifier);
            
  Export.image.toDrive({
              image: classified_CHOT.clip(ROI),
              description: 'HOT_Classification_contemporary',
              region: ROI,
              scale: 30,
              //folder: 'EE_outputs',
              maxPixels:1e13,
              dimensions: 512,
              skipEmptyTiles: true
              });
              
  classified_CHOT.evaluate(function(){
              
              Map.addLayer(classified_CHOT.clip(ROI), {min:1, max:70, palette: clPalette}, 'HOT_Classification_contemporary');
              
              // Get a confusion matrix resubstitution accuracy.
              var CHOT_trainAccuracy = CHOT_trained_classifier.confusionMatrix();
              print('HOT resubstitution error matrix: ', CHOT_trainAccuracy);
              print('HOT Training overall accuracy: ', CHOT_trainAccuracy.accuracy());
              
              // Classify the validation data.
              var validated_CHOT = CHOT_validation.classify(CHOT_trained_classifier);
              
              // Get a confusion matrix representing expected accuracy.
              var CHOT_testAccuracy = validated_CHOT.errorMatrix('class', 'classification');
              print('Validation error matrix: ', CHOT_testAccuracy);
              print('Validation overall accuracy: ', CHOT_testAccuracy.accuracy());
  });

  return classified_CHOT;
};

exports.ClotClassify = function(Clot, t_poly, label, bands, ROI, trees){
  
  var clPalette = [
  'E69800', // Terrestrial Forest
  '267300', // Closed-Canopy Mangrove
  '4CE600', // Open-Canopy Mangrove I
  '8400A8', // Exposed / Barren
  'CDF57A', // Open-Canopy Mangrove II
  '00FFC5', // Urban / Built
  '004DA8', // Residual Water
  'FFFF00', // Non-Forest Vegetation
  ];
  
  // Overlay the points on the imagery to get training for LOT
  var sample_CLOT = Clot.select(bands).sampleRegions({
              collection: t_poly,
              properties: [label],
              scale: 30, 
              tileScale: 16
            });

  sample_CLOT = sample_CLOT.randomColumn({ seed: 1 });
  var CLOT_training = sample_CLOT.filter(ee.Filter.lt('random', 0.7));
  var CLOT_validation = sample_CLOT.filter(ee.Filter.gte('random', 0.7));
          
  // Train a RF classifier for the LOT image
  var CLOT_trained_classifier = ee.Classifier.smileRandomForest(trees)
                              .train({
                                  features: CLOT_training,
                                  classProperty: label,
                                  inputProperties: bands
                                  });

  // Classify the LOT image.
  var classified_CLOT = Clot.classify(CLOT_trained_classifier);
  
  Export.image.toDrive({
              image: classified_CLOT.clip(ROI),
              description: 'LOT_Classification_contemporary',
              region: ROI,
              scale: 30,
              //folder: 'EE_outputs',
              maxPixels:1e13,
              dimensions: 512,
              skipEmptyTiles: true
            });
  
  classified_CLOT.evaluate(function(){
              
              Map.addLayer(classified_CLOT.clip(ROI), {min:1, max:70, palette: clPalette}, 'LOT_Classification_contemporary');
              
              // Get a confusion matrix resubstitution accuracy.
              var CLOT_trainAccuracy = CLOT_trained_classifier.confusionMatrix();
              print('LOT Cont. resubstitution error matrix: ', CLOT_trainAccuracy);
              print('LOT Cont. Training overall accuracy: ', CLOT_trainAccuracy.accuracy());
              
              // Classify the validation data.
              var validated_CLOT = CLOT_validation.classify(CLOT_trained_classifier);
              
              // Get a confusion matrix representing expected accuracy.
              var CLOT_testAccuracy = validated_CLOT.errorMatrix('class', 'classification');
              print('LOT Cont. Validation error matrix: ', CLOT_testAccuracy);
              print('LOT Cont. Validation overall accuracy: ', CLOT_testAccuracy.accuracy());
  });
  
  return classified_CLOT;
};



exports.CcomClassify = function(Chot, Clot, t_poly, label, bands, ROI, trees){

  var clPalette = [
  'E69800', // Terrestrial Forest
  '267300', // Closed-Canopy Mangrove
  '4CE600', // Open-Canopy Mangrove I
  '8400A8', // Exposed / Barren
  'CDF57A', // Open-Canopy Mangrove II
  '00FFC5', // Urban / Built
  '004DA8', // Residual Water
  'FFFF00', // Non-Forest Vegetation
  ];
  
  var Ccom = Chot.addBands(Clot);
  
  // Overlay the points on the imagery to get training for LOT
  var sample_Ccom = Ccom.select(bands).sampleRegions({
              collection: t_poly,
              properties: [label],
              scale: 30, 
              tileScale: 16
            });

  sample_Ccom = sample_Ccom.randomColumn({ seed: 1 });
  var CCOM_training = sample_Ccom.filter(ee.Filter.lt('random', 0.7));
  var CCOM_validation = sample_Ccom.filter(ee.Filter.gte('random', 0.7));
          
  // Train a RF classifier for the LOT image
  var CCOM_trained_classifier = ee.Classifier.smileRandomForest(trees)
                              .train({
                                  features: CCOM_training,
                                  classProperty: label,
                                  inputProperties: bands
                                  });

  // Classify the LOT image.
  var classified_CCOM = Ccom.classify(CCOM_trained_classifier);
  
  Export.image.toDrive({
              image: classified_CCOM.clip(ROI),
              description: 'Combine_Classification_contemporary',
              region: ROI,
              scale: 30,
              //folder: 'EE_outputs',
              maxPixels:1e13,
              dimensions: 512,
              skipEmptyTiles: true
            });
  
  classified_CCOM.evaluate(function(){
              
              Map.addLayer(classified_CCOM.clip(ROI), {min:1, max:70, palette: clPalette}, 'Combine_Classification_contemporary');
    
              // Get a confusion matrix resubstitution accuracy.
              var CCOM_trainAccuracy = CCOM_trained_classifier.confusionMatrix();
              print('Combine Cont. resubstitution error matrix: ', CCOM_trainAccuracy);
              print('Combine Cont. Training overall accuracy: ', CCOM_trainAccuracy.accuracy());
              
              // Classify the validation data.
              var validated_CCOM = CCOM_validation.classify(CCOM_trained_classifier);
              
              // Get a confusion matrix representing expected accuracy.
              var CCOM_testAccuracy = validated_CCOM.errorMatrix('class', 'classification');
              print('Combine Cont. Validation error matrix: ', CCOM_testAccuracy);
              print('Combine Cont. Validation overall accuracy: ', CCOM_testAccuracy.accuracy());
  });  
            
  return classified_CCOM;
  
};

  
exports.HhotClassify = function(Hhot, class_ref_type, Chot, t_poly, label, bands, ROI, trees){

  var clPalette = [
  'E69800', // Terrestrial Forest
  '267300', // Closed-Canopy Mangrove
  '4CE600', // Open-Canopy Mangrove I
  '8400A8', // Exposed / Barren
  'CDF57A', // Open-Canopy Mangrove II
  '00FFC5', // Urban / Built
  '004DA8', // Residual Water
  'FFFF00', // Non-Forest Vegetation
  ];  
  
  var non_STI = function(){
    // Overlay the points on the imagery to get training for HOT
    var sample_HHOT = Chot.select(bands).sampleRegions({
                collection: t_poly,
                properties: [label],
                scale: 30, 
                tileScale: 16
              });
    return sample_HHOT;
    }; 

  var STI = function(){    
    // Overlay the points on the imagery to get training for HOT
    var sample_HHOT = Hhot.select(bands).sampleRegions({
                collection: t_poly,
                properties: [label],
                scale: 30, 
                tileScale: 16
              });
    return sample_HHOT;
    }; 

  if(class_ref_type === true){ var sample_HHOT = STI();}else{var sample_HHOT = non_STI();}
  //add random column to training data
  sample_HHOT = sample_HHOT.randomColumn({ seed: 1 });
  // select 70% to train
  var HHOT_training = sample_HHOT.filter(ee.Filter.lt('random', 0.7));
  // reserve 30% to validate
  var HHOT_validation = sample_HHOT.filter(ee.Filter.gte('random', 0.7));

  // Train a RF classifier for the HOT image
  var HHOT_trained_classifier = ee.Classifier.smileRandomForest(trees)
                              .train({
                                  features: HHOT_training,
                                  classProperty: label,
                                  inputProperties: bands
                                  });
  

  // Classify the HOT image.
  var classified_HHOT = Hhot.classify(HHOT_trained_classifier);
            
  Export.image.toDrive({
              image: classified_HHOT.clip(ROI),
              description: 'HOT_Classification_historic',
              region: ROI,
              scale: 30,
              //folder: 'EE_outputs',
              maxPixels:1e13,
              dimensions: 512,
              skipEmptyTiles: true
              });
  
  classified_HHOT.evaluate(function(){
              
              Map.addLayer(classified_HHOT.clip(ROI), {min:1, max:70, palette: clPalette}, 'HOT_Classification_Historic');
    
              // Get a confusion matrix resubstitution accuracy.
              var HHOT_trainAccuracy = HHOT_trained_classifier.confusionMatrix();
              print('HOT Hist. resubstitution error matrix: ', HHOT_trainAccuracy);
              print('HOT Hist.Training overall accuracy: ', HHOT_trainAccuracy.accuracy());
              
              // Classify the validation data.
              var validated_HHOT = HHOT_validation.classify(HHOT_trained_classifier);
              
              // Get a confusion matrix representing expected accuracy.
              var HHOT_testAccuracy = validated_HHOT.errorMatrix('class', 'classification');
              print('HOT Hist. Validation error matrix: ', HHOT_testAccuracy);
              print('HOT Hist. Validation overall accuracy: ', HHOT_testAccuracy.accuracy());
  });
  
  
  return classified_HHOT;

};

exports.HlotClassify = function(Hlot, class_ref_type, Clot, t_poly, label, bands, ROI, trees){

  var clPalette = [
  'E69800', // Terrestrial Forest
  '267300', // Closed-Canopy Mangrove
  '4CE600', // Open-Canopy Mangrove I
  '8400A8', // Exposed / Barren
  'CDF57A', // Open-Canopy Mangrove II
  '00FFC5', // Urban / Built
  '004DA8', // Residual Water
  'FFFF00', // Non-Forest Vegetation
  ];  
  
  var non_STI = function(){
    // Overlay the points on the imagery to get training for HOT
    var sample_HLOT = Clot.select(bands).sampleRegions({
                collection: t_poly,
                properties: [label],
                scale: 30, 
                tileScale: 16
              });
    return sample_HLOT;
    }; 

  var STI = function(){    
    // Overlay the points on the imagery to get training for HOT
    var sample_HLOT = Hlot.select(bands).sampleRegions({
                collection: t_poly,
                properties: [label],
                scale: 30, 
                tileScale: 16
              });
    return sample_HLOT;
    }; 

  if(class_ref_type === true){ var sample_HLOT = STI();}else{var sample_HLOT = non_STI();}
  //add random column to training data
  sample_HLOT = sample_HLOT.randomColumn({ seed: 1 });
  // select 70% to train
  var HLOT_training = sample_HLOT.filter(ee.Filter.lt('random', 0.7));
  // reserve 30% to validate
  var HLOT_validation = sample_HLOT.filter(ee.Filter.gte('random', 0.7));

  // Train a RF classifier for the HOT image
  var HLOT_trained_classifier = ee.Classifier.smileRandomForest(trees)
                              .train({
                                  features: HLOT_training,
                                  classProperty: label,
                                  inputProperties: bands
                                  });
  

  // Classify the HOT image.
  var classified_HLOT = Hlot.classify(HLOT_trained_classifier);
            
  Export.image.toDrive({
              image: classified_HLOT.clip(ROI),
              description: 'LOT_Classification_Historic',
              region: ROI,
              scale: 30,
              //folder: 'EE_outputs',
              maxPixels:1e13,
              dimensions: 512,
              skipEmptyTiles: true
              });

  classified_HLOT.evaluate(function(){
              
              Map.addLayer(classified_HLOT.clip(ROI), {min:1, max:70, palette: clPalette}, 'LOT_Classification_Historic');
    
              // Get a confusion matrix resubstitution accuracy.
              var HLOT_trainAccuracy = HLOT_trained_classifier.confusionMatrix();
              print('LOT Hist. resubstitution error matrix: ', HLOT_trainAccuracy);
              print('LOT Hist. Training overall accuracy: ', HLOT_trainAccuracy.accuracy());
              
              // Classify the validation data.
              var validated_CLOT = CLOT_validation.classify(HLOT_trained_classifier);
              
              // Get a confusion matrix representing expected accuracy.
              var HLOT_testAccuracy = validated_HLOT.errorMatrix('class', 'classification');
              print('LOT Hist. Validation error matrix: ', HLOT_testAccuracy);
              print('LOT Hist. Validation overall accuracy: ', HLOT_testAccuracy.accuracy());
  });
  
  
  return classified_HLOT;
 
};

exports.HcomClassify = function(Hhot, Hlot, class_ref_type, Chot, Clot, t_poly, label, bands, ROI, trees){

  var clPalette = [
  'E69800', // Terrestrial Forest
  '267300', // Closed-Canopy Mangrove
  '4CE600', // Open-Canopy Mangrove I
  '8400A8', // Exposed / Barren
  'CDF57A', // Open-Canopy Mangrove II
  '00FFC5', // Urban / Built
  '004DA8', // Residual Water
  'FFFF00', // Non-Forest Vegetation
  ];
   
  var Hcom = Hhot.addBands(Hlot);
  var Ccom = Chot.addBands(Clot);
    
    
  var non_STI = function(){
  // Overlay the points on the imagery to get training for HOT
  var sample_HCOM = Ccom.select(bands).sampleRegions({
                collection: t_poly,
                properties: [label],
                scale: 30, 
                tileScale: 16
              });
    return sample_HCOM;
    }; 

  var STI = function(){    
    // Overlay the points on the imagery to get training for HOT
    var sample_HCOM = Hcom.select(bands).sampleRegions({
                collection: t_poly,
                properties: [label],
                scale: 30, 
                tileScale: 16
              });
    return sample_HCOM;
    }; 

  if(class_ref_type === true){ var sample_HCOM = STI();}else{var sample_HCOM = non_STI();}
  
  //add random column to training data
  sample_HCOM = sample_HCOM.randomColumn({ seed: 1 });
  // select 70% to train
  var HCOM_training = sample_HCOM.filter(ee.Filter.lt('random', 0.7));
  // reserve 30% to validate
  var HCOM_validation = sample_HCOM.filter(ee.Filter.gte('random', 0.7));

  // Train a RF classifier for the HOT image
  var HCOM_trained_classifier = ee.Classifier.smileRandomForest(trees)
                              .train({
                                  features: HCOM_training,
                                  classProperty: label,
                                  inputProperties: bands
                                  });
  

  // Classify the HOT image.
  var classified_HCOM = Hlot.classify(HCOM_trained_classifier);
            
  Export.image.toDrive({
              image: classified_HCOM.clip(ROI),
              description: 'Combine_Classification_historic',
              region: ROI,
              scale: 30,
              //folder: 'EE_outputs',
              maxPixels:1e13,
              dimensions: 512,
              skipEmptyTiles: true
              });
              
  classified_HCOM.evaluate(function(){
              
             Map.addLayer(classified_HCOM.clip(ROI), {min:1, max:70, palette: clPalette}, 'Combine_Classification_Historic');
            
              // Get a confusion matrix resubstitution accuracy.
              var HCOM_trainAccuracy = HCOM_trained_classifier.confusionMatrix();
              print('Combine Hist. resubstitution error matrix: ', HCOM_trainAccuracy);
              print('Combine Hist. Training overall accuracy: ', HCOM_trainAccuracy.accuracy());
              
              // Classify the validation data.
              var validated_HCOM = HCOM_validation.classify(HCOM_trained_classifier);
              
              // Get a confusion matrix representing expected accuracy.
              var HCOM_testAccuracy = validated_HCOM.errorMatrix('class', 'classification');
              print('Combine Hist. Validation error matrix: ', HCOM_testAccuracy);
              print('Combine Hist. Validation overall accuracy: ', HCOM_testAccuracy.accuracy());
  });  
  return classified_HCOM;
 
};